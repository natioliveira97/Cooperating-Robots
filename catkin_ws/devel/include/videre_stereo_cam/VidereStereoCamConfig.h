//#line 2 "/opt/ros/kinetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"
// *********************************************************
//
// File autogenerated for the videre_stereo_cam package
// by the dynamic_reconfigure package.
// Please do not edit.
//
// ********************************************************/

#ifndef __videre_stereo_cam__VIDERESTEREOCAMCONFIG_H__
#define __videre_stereo_cam__VIDERESTEREOCAMCONFIG_H__

#if __cplusplus >= 201103L
#define DYNAMIC_RECONFIGURE_FINAL final
#else
#define DYNAMIC_RECONFIGURE_FINAL
#endif

#include <dynamic_reconfigure/config_tools.h>
#include <limits>
#include <ros/node_handle.h>
#include <dynamic_reconfigure/ConfigDescription.h>
#include <dynamic_reconfigure/ParamDescription.h>
#include <dynamic_reconfigure/Group.h>
#include <dynamic_reconfigure/config_init_mutex.h>
#include <boost/any.hpp>

namespace videre_stereo_cam
{
  class VidereStereoCamConfigStatics;

  class VidereStereoCamConfig
  {
  public:
    class AbstractParamDescription : public dynamic_reconfigure::ParamDescription
    {
    public:
      AbstractParamDescription(std::string n, std::string t, uint32_t l,
          std::string d, std::string e)
      {
        name = n;
        type = t;
        level = l;
        description = d;
        edit_method = e;
      }

      virtual void clamp(VidereStereoCamConfig &config, const VidereStereoCamConfig &max, const VidereStereoCamConfig &min) const = 0;
      virtual void calcLevel(uint32_t &level, const VidereStereoCamConfig &config1, const VidereStereoCamConfig &config2) const = 0;
      virtual void fromServer(const ros::NodeHandle &nh, VidereStereoCamConfig &config) const = 0;
      virtual void toServer(const ros::NodeHandle &nh, const VidereStereoCamConfig &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, VidereStereoCamConfig &config) const = 0;
      virtual void toMessage(dynamic_reconfigure::Config &msg, const VidereStereoCamConfig &config) const = 0;
      virtual void getValue(const VidereStereoCamConfig &config, boost::any &val) const = 0;
    };

    typedef boost::shared_ptr<AbstractParamDescription> AbstractParamDescriptionPtr;
    typedef boost::shared_ptr<const AbstractParamDescription> AbstractParamDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template <class T>
    class ParamDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractParamDescription
    {
    public:
      ParamDescription(std::string a_name, std::string a_type, uint32_t a_level,
          std::string a_description, std::string a_edit_method, T VidereStereoCamConfig::* a_f) :
        AbstractParamDescription(a_name, a_type, a_level, a_description, a_edit_method),
        field(a_f)
      {}

      T (VidereStereoCamConfig::* field);

      virtual void clamp(VidereStereoCamConfig &config, const VidereStereoCamConfig &max, const VidereStereoCamConfig &min) const
      {
        if (config.*field > max.*field)
          config.*field = max.*field;

        if (config.*field < min.*field)
          config.*field = min.*field;
      }

      virtual void calcLevel(uint32_t &comb_level, const VidereStereoCamConfig &config1, const VidereStereoCamConfig &config2) const
      {
        if (config1.*field != config2.*field)
          comb_level |= level;
      }

      virtual void fromServer(const ros::NodeHandle &nh, VidereStereoCamConfig &config) const
      {
        nh.getParam(name, config.*field);
      }

      virtual void toServer(const ros::NodeHandle &nh, const VidereStereoCamConfig &config) const
      {
        nh.setParam(name, config.*field);
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, VidereStereoCamConfig &config) const
      {
        return dynamic_reconfigure::ConfigTools::getParameter(msg, name, config.*field);
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const VidereStereoCamConfig &config) const
      {
        dynamic_reconfigure::ConfigTools::appendParameter(msg, name, config.*field);
      }

      virtual void getValue(const VidereStereoCamConfig &config, boost::any &val) const
      {
        val = config.*field;
      }
    };

    class AbstractGroupDescription : public dynamic_reconfigure::Group
    {
      public:
      AbstractGroupDescription(std::string n, std::string t, int p, int i, bool s)
      {
        name = n;
        type = t;
        parent = p;
        state = s;
        id = i;
      }

      std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
      bool state;

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &config) const =0;
      virtual void updateParams(boost::any &cfg, VidereStereoCamConfig &top) const= 0;
      virtual void setInitialState(boost::any &cfg) const = 0;


      void convertParams()
      {
        for(std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = abstract_parameters.begin(); i != abstract_parameters.end(); ++i)
        {
          parameters.push_back(dynamic_reconfigure::ParamDescription(**i));
        }
      }
    };

    typedef boost::shared_ptr<AbstractGroupDescription> AbstractGroupDescriptionPtr;
    typedef boost::shared_ptr<const AbstractGroupDescription> AbstractGroupDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template<class T, class PT>
    class GroupDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractGroupDescription
    {
    public:
      GroupDescription(std::string a_name, std::string a_type, int a_parent, int a_id, bool a_s, T PT::* a_f) : AbstractGroupDescription(a_name, a_type, a_parent, a_id, a_s), field(a_f)
      {
      }

      GroupDescription(const GroupDescription<T, PT>& g): AbstractGroupDescription(g.name, g.type, g.parent, g.id, g.state), field(g.field), groups(g.groups)
      {
        parameters = g.parameters;
        abstract_parameters = g.abstract_parameters;
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        if(!dynamic_reconfigure::ConfigTools::getGroupState(msg, name, (*config).*field))
          return false;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          if(!(*i)->fromMessage(msg, n))
            return false;
        }

        return true;
      }

      virtual void setInitialState(boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        T* group = &((*config).*field);
        group->state = state;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = boost::any(&((*config).*field));
          (*i)->setInitialState(n);
        }

      }

      virtual void updateParams(boost::any &cfg, VidereStereoCamConfig &top) const
      {
        PT* config = boost::any_cast<PT*>(cfg);

        T* f = &((*config).*field);
        f->setParams(top, abstract_parameters);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          (*i)->updateParams(n, top);
        }
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &cfg) const
      {
        const PT config = boost::any_cast<PT>(cfg);
        dynamic_reconfigure::ConfigTools::appendGroup<T>(msg, name, id, parent, config.*field);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          (*i)->toMessage(msg, config.*field);
        }
      }

      T (PT::* field);
      std::vector<VidereStereoCamConfig::AbstractGroupDescriptionConstPtr> groups;
    };

class DEFAULT
{
  public:
    DEFAULT()
    {
      state = true;
      name = "Default";
    }

    void setParams(VidereStereoCamConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("videre_mode"==(*_i)->name){videre_mode = boost::any_cast<std::string>(val);}
        if("convert_to_color"==(*_i)->name){convert_to_color = boost::any_cast<bool>(val);}
        if("brightness_auto"==(*_i)->name){brightness_auto = boost::any_cast<bool>(val);}
        if("brightness"==(*_i)->name){brightness = boost::any_cast<int>(val);}
        if("exposure_auto"==(*_i)->name){exposure_auto = boost::any_cast<bool>(val);}
        if("exposure"==(*_i)->name){exposure = boost::any_cast<int>(val);}
        if("gain_auto"==(*_i)->name){gain_auto = boost::any_cast<bool>(val);}
        if("gain"==(*_i)->name){gain = boost::any_cast<int>(val);}
        if("whitebalance_auto"==(*_i)->name){whitebalance_auto = boost::any_cast<bool>(val);}
        if("whitebalance_blue"==(*_i)->name){whitebalance_blue = boost::any_cast<int>(val);}
        if("whitebalance_red"==(*_i)->name){whitebalance_red = boost::any_cast<int>(val);}
        if("companding"==(*_i)->name){companding = boost::any_cast<bool>(val);}
        if("hdr"==(*_i)->name){hdr = boost::any_cast<bool>(val);}
        if("frame_id"==(*_i)->name){frame_id = boost::any_cast<std::string>(val);}
        if("uniqueness_threshold"==(*_i)->name){uniqueness_threshold = boost::any_cast<int>(val);}
        if("texture_threshold"==(*_i)->name){texture_threshold = boost::any_cast<int>(val);}
        if("speckle_size"==(*_i)->name){speckle_size = boost::any_cast<int>(val);}
        if("speckle_range"==(*_i)->name){speckle_range = boost::any_cast<int>(val);}
        if("horopter"==(*_i)->name){horopter = boost::any_cast<int>(val);}
      }
    }

    std::string videre_mode;
bool convert_to_color;
bool brightness_auto;
int brightness;
bool exposure_auto;
int exposure;
bool gain_auto;
int gain;
bool whitebalance_auto;
int whitebalance_blue;
int whitebalance_red;
bool companding;
bool hdr;
std::string frame_id;
int uniqueness_threshold;
int texture_threshold;
int speckle_size;
int speckle_range;
int horopter;

    bool state;
    std::string name;

    
}groups;



//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      std::string videre_mode;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool convert_to_color;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool brightness_auto;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int brightness;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool exposure_auto;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int exposure;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool gain_auto;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int gain;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool whitebalance_auto;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int whitebalance_blue;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int whitebalance_red;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool companding;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      bool hdr;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      std::string frame_id;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int uniqueness_threshold;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int texture_threshold;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int speckle_size;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int speckle_range;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int horopter;
//#line 228 "/opt/ros/kinetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

    bool __fromMessage__(dynamic_reconfigure::Config &msg)
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();

      int count = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        if ((*i)->fromMessage(msg, *this))
          count++;

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i ++)
      {
        if ((*i)->id == 0)
        {
          boost::any n = boost::any(this);
          (*i)->updateParams(n, *this);
          (*i)->fromMessage(msg, n);
        }
      }

      if (count != dynamic_reconfigure::ConfigTools::size(msg))
      {
        ROS_ERROR("VidereStereoCamConfig::__fromMessage__ called with an unexpected parameter.");
        ROS_ERROR("Booleans:");
        for (unsigned int i = 0; i < msg.bools.size(); i++)
          ROS_ERROR("  %s", msg.bools[i].name.c_str());
        ROS_ERROR("Integers:");
        for (unsigned int i = 0; i < msg.ints.size(); i++)
          ROS_ERROR("  %s", msg.ints[i].name.c_str());
        ROS_ERROR("Doubles:");
        for (unsigned int i = 0; i < msg.doubles.size(); i++)
          ROS_ERROR("  %s", msg.doubles[i].name.c_str());
        ROS_ERROR("Strings:");
        for (unsigned int i = 0; i < msg.strs.size(); i++)
          ROS_ERROR("  %s", msg.strs[i].name.c_str());
        // @todo Check that there are no duplicates. Make this error more
        // explicit.
        return false;
      }
      return true;
    }

    // This version of __toMessage__ is used during initialization of
    // statics when __getParamDescriptions__ can't be called yet.
    void __toMessage__(dynamic_reconfigure::Config &msg, const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__) const
    {
      dynamic_reconfigure::ConfigTools::clear(msg);
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toMessage(msg, *this);

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        if((*i)->id == 0)
        {
          (*i)->toMessage(msg, *this);
        }
      }
    }

    void __toMessage__(dynamic_reconfigure::Config &msg) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      __toMessage__(msg, __param_descriptions__, __group_descriptions__);
    }

    void __toServer__(const ros::NodeHandle &nh) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toServer(nh, *this);
    }

    void __fromServer__(const ros::NodeHandle &nh)
    {
      static bool setup=false;

      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->fromServer(nh, *this);

      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i++){
        if (!setup && (*i)->id == 0) {
          setup = true;
          boost::any n = boost::any(this);
          (*i)->setInitialState(n);
        }
      }
    }

    void __clamp__()
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const VidereStereoCamConfig &__max__ = __getMax__();
      const VidereStereoCamConfig &__min__ = __getMin__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->clamp(*this, __max__, __min__);
    }

    uint32_t __level__(const VidereStereoCamConfig &config) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      uint32_t level = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->calcLevel(level, config, *this);
      return level;
    }

    static const dynamic_reconfigure::ConfigDescription &__getDescriptionMessage__();
    static const VidereStereoCamConfig &__getDefault__();
    static const VidereStereoCamConfig &__getMax__();
    static const VidereStereoCamConfig &__getMin__();
    static const std::vector<AbstractParamDescriptionConstPtr> &__getParamDescriptions__();
    static const std::vector<AbstractGroupDescriptionConstPtr> &__getGroupDescriptions__();

  private:
    static const VidereStereoCamConfigStatics *__get_statics__();
  };

  template <> // Max and min are ignored for strings.
  inline void VidereStereoCamConfig::ParamDescription<std::string>::clamp(VidereStereoCamConfig &config, const VidereStereoCamConfig &max, const VidereStereoCamConfig &min) const
  {
    (void) config;
    (void) min;
    (void) max;
    return;
  }

  class VidereStereoCamConfigStatics
  {
    friend class VidereStereoCamConfig;

    VidereStereoCamConfigStatics()
    {
VidereStereoCamConfig::GroupDescription<VidereStereoCamConfig::DEFAULT, VidereStereoCamConfig> Default("Default", "", 0, 0, true, &VidereStereoCamConfig::groups);
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.videre_mode = "";
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.videre_mode = "";
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.videre_mode = "none";
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(VidereStereoCamConfig::AbstractParamDescriptionConstPtr(new VidereStereoCamConfig::ParamDescription<std::string>("videre_mode", "str", 1, "Amount of processing done on camera if STOC", "{'enum_description': 'Amount of processing done on camera if STOC.', 'enum': [{'srcline': 48, 'description': 'Left raw + Right raw', 'srcfile': '/home/cam/Cooperating-Robots/catkin_ws/src/videre_stereo_cam/cfg/VidereStereoCam.cfg', 'cconsttype': 'const char * const', 'value': 'none', 'ctype': 'std::string', 'type': 'str', 'name': 'PROC_MODE_NONE'}, {'srcline': 49, 'description': 'Left rectified + Right rectified', 'srcfile': '/home/cam/Cooperating-Robots/catkin_ws/src/videre_stereo_cam/cfg/VidereStereoCam.cfg', 'cconsttype': 'const char * const', 'value': 'rectified', 'ctype': 'std::string', 'type': 'str', 'name': 'PROC_MODE_RECTIFIED'}, {'srcline': 50, 'description': 'Left raw + Disprity', 'srcfile': '/home/cam/Cooperating-Robots/catkin_ws/src/videre_stereo_cam/cfg/VidereStereoCam.cfg', 'cconsttype': 'const char * const', 'value': 'disparity_raw', 'ctype': 'std::string', 'type': 'str', 'name': 'PROC_MODE_DISPARITY_RAW'}, {'srcline': 51, 'description': 'Left rectified + Disparity', 'srcfile': '/home/cam/Cooperating-Robots/catkin_ws/src/videre_stereo_cam/cfg/VidereStereoCam.cfg', 'cconsttype': 'const char * const', 'value': 'disparity', 'ctype': 'std::string', 'type': 'str', 'name': 'PROC_MODE_DISPARITY'}, {'srcline': 52, 'description': 'Test image', 'srcfile': '/home/cam/Cooperating-Robots/catkin_ws/src/videre_stereo_cam/cfg/VidereStereoCam.cfg', 'cconsttype': 'const char * const', 'value': 'test', 'ctype': 'std::string', 'type': 'str', 'name': 'PROC_MODE_TEST'}]}", &VidereStereoCamConfig::videre_mode)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(VidereStereoCamConfig::AbstractParamDescriptionConstPtr(new VidereStereoCamConfig::ParamDescription<std::string>("videre_mode", "str", 1, "Amount of processing done on camera if STOC", "{'enum_description': 'Amount of processing done on camera if STOC.', 'enum': [{'srcline': 48, 'description': 'Left raw + Right raw', 'srcfile': '/home/cam/Cooperating-Robots/catkin_ws/src/videre_stereo_cam/cfg/VidereStereoCam.cfg', 'cconsttype': 'const char * const', 'value': 'none', 'ctype': 'std::string', 'type': 'str', 'name': 'PROC_MODE_NONE'}, {'srcline': 49, 'description': 'Left rectified + Right rectified', 'srcfile': '/home/cam/Cooperating-Robots/catkin_ws/src/videre_stereo_cam/cfg/VidereStereoCam.cfg', 'cconsttype': 'const char * const', 'value': 'rectified', 'ctype': 'std::string', 'type': 'str', 'name': 'PROC_MODE_RECTIFIED'}, {'srcline': 50, 'description': 'Left raw + Disprity', 'srcfile': '/home/cam/Cooperating-Robots/catkin_ws/src/videre_stereo_cam/cfg/VidereStereoCam.cfg', 'cconsttype': 'const char * const', 'value': 'disparity_raw', 'ctype': 'std::string', 'type': 'str', 'name': 'PROC_MODE_DISPARITY_RAW'}, {'srcline': 51, 'description': 'Left rectified + Disparity', 'srcfile': '/home/cam/Cooperating-Robots/catkin_ws/src/videre_stereo_cam/cfg/VidereStereoCam.cfg', 'cconsttype': 'const char * const', 'value': 'disparity', 'ctype': 'std::string', 'type': 'str', 'name': 'PROC_MODE_DISPARITY'}, {'srcline': 52, 'description': 'Test image', 'srcfile': '/home/cam/Cooperating-Robots/catkin_ws/src/videre_stereo_cam/cfg/VidereStereoCam.cfg', 'cconsttype': 'const char * const', 'value': 'test', 'ctype': 'std::string', 'type': 'str', 'name': 'PROC_MODE_TEST'}]}", &VidereStereoCamConfig::videre_mode)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.convert_to_color = 0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.convert_to_color = 1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.convert_to_color = 0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(VidereStereoCamConfig::AbstractParamDescriptionConstPtr(new VidereStereoCamConfig::ParamDescription<bool>("convert_to_color", "bool", 1, "Calculate color from Bayer pattern", "", &VidereStereoCamConfig::convert_to_color)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(VidereStereoCamConfig::AbstractParamDescriptionConstPtr(new VidereStereoCamConfig::ParamDescription<bool>("convert_to_color", "bool", 1, "Calculate color from Bayer pattern", "", &VidereStereoCamConfig::convert_to_color)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.brightness_auto = 0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.brightness_auto = 1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.brightness_auto = 1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(VidereStereoCamConfig::AbstractParamDescriptionConstPtr(new VidereStereoCamConfig::ParamDescription<bool>("brightness_auto", "bool", 0, "Auto adjust brightness", "", &VidereStereoCamConfig::brightness_auto)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(VidereStereoCamConfig::AbstractParamDescriptionConstPtr(new VidereStereoCamConfig::ParamDescription<bool>("brightness_auto", "bool", 0, "Auto adjust brightness", "", &VidereStereoCamConfig::brightness_auto)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.brightness = 0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.brightness = 255;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.brightness = 50;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(VidereStereoCamConfig::AbstractParamDescriptionConstPtr(new VidereStereoCamConfig::ParamDescription<int>("brightness", "int", 0, "Brightness level if not auto", "", &VidereStereoCamConfig::brightness)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(VidereStereoCamConfig::AbstractParamDescriptionConstPtr(new VidereStereoCamConfig::ParamDescription<int>("brightness", "int", 0, "Brightness level if not auto", "", &VidereStereoCamConfig::brightness)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.exposure_auto = 0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.exposure_auto = 1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.exposure_auto = 1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(VidereStereoCamConfig::AbstractParamDescriptionConstPtr(new VidereStereoCamConfig::ParamDescription<bool>("exposure_auto", "bool", 0, "Auto adjust exposure", "", &VidereStereoCamConfig::exposure_auto)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(VidereStereoCamConfig::AbstractParamDescriptionConstPtr(new VidereStereoCamConfig::ParamDescription<bool>("exposure_auto", "bool", 0, "Auto adjust exposure", "", &VidereStereoCamConfig::exposure_auto)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.exposure = 0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.exposure = 529;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.exposure = 0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(VidereStereoCamConfig::AbstractParamDescriptionConstPtr(new VidereStereoCamConfig::ParamDescription<int>("exposure", "int", 0, "Exposure level if not auto", "", &VidereStereoCamConfig::exposure)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(VidereStereoCamConfig::AbstractParamDescriptionConstPtr(new VidereStereoCamConfig::ParamDescription<int>("exposure", "int", 0, "Exposure level if not auto", "", &VidereStereoCamConfig::exposure)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.gain_auto = 0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.gain_auto = 1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.gain_auto = 1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(VidereStereoCamConfig::AbstractParamDescriptionConstPtr(new VidereStereoCamConfig::ParamDescription<bool>("gain_auto", "bool", 0, "Auto adjust gain", "", &VidereStereoCamConfig::gain_auto)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(VidereStereoCamConfig::AbstractParamDescriptionConstPtr(new VidereStereoCamConfig::ParamDescription<bool>("gain_auto", "bool", 0, "Auto adjust gain", "", &VidereStereoCamConfig::gain_auto)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.gain = 0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.gain = 48;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.gain = 0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(VidereStereoCamConfig::AbstractParamDescriptionConstPtr(new VidereStereoCamConfig::ParamDescription<int>("gain", "int", 0, "Gain level if not auto", "", &VidereStereoCamConfig::gain)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(VidereStereoCamConfig::AbstractParamDescriptionConstPtr(new VidereStereoCamConfig::ParamDescription<int>("gain", "int", 0, "Gain level if not auto", "", &VidereStereoCamConfig::gain)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.whitebalance_auto = 0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.whitebalance_auto = 1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.whitebalance_auto = 1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(VidereStereoCamConfig::AbstractParamDescriptionConstPtr(new VidereStereoCamConfig::ParamDescription<bool>("whitebalance_auto", "bool", 0, "Auto adjust whitebalance", "", &VidereStereoCamConfig::whitebalance_auto)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(VidereStereoCamConfig::AbstractParamDescriptionConstPtr(new VidereStereoCamConfig::ParamDescription<bool>("whitebalance_auto", "bool", 0, "Auto adjust whitebalance", "", &VidereStereoCamConfig::whitebalance_auto)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.whitebalance_blue = 0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.whitebalance_blue = 30;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.whitebalance_blue = 15;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(VidereStereoCamConfig::AbstractParamDescriptionConstPtr(new VidereStereoCamConfig::ParamDescription<int>("whitebalance_blue", "int", 0, "Blue/U level if not auto", "", &VidereStereoCamConfig::whitebalance_blue)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(VidereStereoCamConfig::AbstractParamDescriptionConstPtr(new VidereStereoCamConfig::ParamDescription<int>("whitebalance_blue", "int", 0, "Blue/U level if not auto", "", &VidereStereoCamConfig::whitebalance_blue)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.whitebalance_red = 0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.whitebalance_red = 30;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.whitebalance_red = 15;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(VidereStereoCamConfig::AbstractParamDescriptionConstPtr(new VidereStereoCamConfig::ParamDescription<int>("whitebalance_red", "int", 0, "Red/V level if not auto", "", &VidereStereoCamConfig::whitebalance_red)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(VidereStereoCamConfig::AbstractParamDescriptionConstPtr(new VidereStereoCamConfig::ParamDescription<int>("whitebalance_red", "int", 0, "Red/V level if not auto", "", &VidereStereoCamConfig::whitebalance_red)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.companding = 0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.companding = 1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.companding = 1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(VidereStereoCamConfig::AbstractParamDescriptionConstPtr(new VidereStereoCamConfig::ParamDescription<bool>("companding", "bool", 0, "Bring up low light levels", "", &VidereStereoCamConfig::companding)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(VidereStereoCamConfig::AbstractParamDescriptionConstPtr(new VidereStereoCamConfig::ParamDescription<bool>("companding", "bool", 0, "Bring up low light levels", "", &VidereStereoCamConfig::companding)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.hdr = 0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.hdr = 1;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.hdr = 0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(VidereStereoCamConfig::AbstractParamDescriptionConstPtr(new VidereStereoCamConfig::ParamDescription<bool>("hdr", "bool", 0, "High dynamic range", "", &VidereStereoCamConfig::hdr)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(VidereStereoCamConfig::AbstractParamDescriptionConstPtr(new VidereStereoCamConfig::ParamDescription<bool>("hdr", "bool", 0, "High dynamic range", "", &VidereStereoCamConfig::hdr)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.frame_id = "";
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.frame_id = "";
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.frame_id = "stereo_optical_frame";
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(VidereStereoCamConfig::AbstractParamDescriptionConstPtr(new VidereStereoCamConfig::ParamDescription<std::string>("frame_id", "str", 0, "The optical camera TF frame set in message headers", "", &VidereStereoCamConfig::frame_id)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(VidereStereoCamConfig::AbstractParamDescriptionConstPtr(new VidereStereoCamConfig::ParamDescription<std::string>("frame_id", "str", 0, "The optical camera TF frame set in message headers", "", &VidereStereoCamConfig::frame_id)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.uniqueness_threshold = 0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.uniqueness_threshold = 189;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.uniqueness_threshold = 36;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(VidereStereoCamConfig::AbstractParamDescriptionConstPtr(new VidereStereoCamConfig::ParamDescription<int>("uniqueness_threshold", "int", 0, "Filter out if best match does not sufficiently exceed the next-best match", "", &VidereStereoCamConfig::uniqueness_threshold)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(VidereStereoCamConfig::AbstractParamDescriptionConstPtr(new VidereStereoCamConfig::ParamDescription<int>("uniqueness_threshold", "int", 0, "Filter out if best match does not sufficiently exceed the next-best match", "", &VidereStereoCamConfig::uniqueness_threshold)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.texture_threshold = 0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.texture_threshold = 189;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.texture_threshold = 30;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(VidereStereoCamConfig::AbstractParamDescriptionConstPtr(new VidereStereoCamConfig::ParamDescription<int>("texture_threshold", "int", 0, "Filter out if SAD window response does not exceed texture threshold", "", &VidereStereoCamConfig::texture_threshold)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(VidereStereoCamConfig::AbstractParamDescriptionConstPtr(new VidereStereoCamConfig::ParamDescription<int>("texture_threshold", "int", 0, "Filter out if SAD window response does not exceed texture threshold", "", &VidereStereoCamConfig::texture_threshold)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.speckle_size = 0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.speckle_size = 1000;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.speckle_size = 100;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(VidereStereoCamConfig::AbstractParamDescriptionConstPtr(new VidereStereoCamConfig::ParamDescription<int>("speckle_size", "int", 0, "Reject regions smaller than this size, pixels", "", &VidereStereoCamConfig::speckle_size)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(VidereStereoCamConfig::AbstractParamDescriptionConstPtr(new VidereStereoCamConfig::ParamDescription<int>("speckle_size", "int", 0, "Reject regions smaller than this size, pixels", "", &VidereStereoCamConfig::speckle_size)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.speckle_range = 0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.speckle_range = 31;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.speckle_range = 10;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(VidereStereoCamConfig::AbstractParamDescriptionConstPtr(new VidereStereoCamConfig::ParamDescription<int>("speckle_range", "int", 0, "Max allowed difference between detected disparities", "", &VidereStereoCamConfig::speckle_range)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(VidereStereoCamConfig::AbstractParamDescriptionConstPtr(new VidereStereoCamConfig::ParamDescription<int>("speckle_range", "int", 0, "Max allowed difference between detected disparities", "", &VidereStereoCamConfig::speckle_range)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.horopter = 0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.horopter = 63;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.horopter = 0;
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(VidereStereoCamConfig::AbstractParamDescriptionConstPtr(new VidereStereoCamConfig::ParamDescription<int>("horopter", "int", 0, "Change horopter", "", &VidereStereoCamConfig::horopter)));
//#line 290 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(VidereStereoCamConfig::AbstractParamDescriptionConstPtr(new VidereStereoCamConfig::ParamDescription<int>("horopter", "int", 0, "Change horopter", "", &VidereStereoCamConfig::horopter)));
//#line 245 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.convertParams();
//#line 245 "/opt/ros/kinetic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(VidereStereoCamConfig::AbstractGroupDescriptionConstPtr(new VidereStereoCamConfig::GroupDescription<VidereStereoCamConfig::DEFAULT, VidereStereoCamConfig>(Default)));
//#line 366 "/opt/ros/kinetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

      for (std::vector<VidereStereoCamConfig::AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        __description_message__.groups.push_back(**i);
      }
      __max__.__toMessage__(__description_message__.max, __param_descriptions__, __group_descriptions__);
      __min__.__toMessage__(__description_message__.min, __param_descriptions__, __group_descriptions__);
      __default__.__toMessage__(__description_message__.dflt, __param_descriptions__, __group_descriptions__);
    }
    std::vector<VidereStereoCamConfig::AbstractParamDescriptionConstPtr> __param_descriptions__;
    std::vector<VidereStereoCamConfig::AbstractGroupDescriptionConstPtr> __group_descriptions__;
    VidereStereoCamConfig __max__;
    VidereStereoCamConfig __min__;
    VidereStereoCamConfig __default__;
    dynamic_reconfigure::ConfigDescription __description_message__;

    static const VidereStereoCamConfigStatics *get_instance()
    {
      // Split this off in a separate function because I know that
      // instance will get initialized the first time get_instance is
      // called, and I am guaranteeing that get_instance gets called at
      // most once.
      static VidereStereoCamConfigStatics instance;
      return &instance;
    }
  };

  inline const dynamic_reconfigure::ConfigDescription &VidereStereoCamConfig::__getDescriptionMessage__()
  {
    return __get_statics__()->__description_message__;
  }

  inline const VidereStereoCamConfig &VidereStereoCamConfig::__getDefault__()
  {
    return __get_statics__()->__default__;
  }

  inline const VidereStereoCamConfig &VidereStereoCamConfig::__getMax__()
  {
    return __get_statics__()->__max__;
  }

  inline const VidereStereoCamConfig &VidereStereoCamConfig::__getMin__()
  {
    return __get_statics__()->__min__;
  }

  inline const std::vector<VidereStereoCamConfig::AbstractParamDescriptionConstPtr> &VidereStereoCamConfig::__getParamDescriptions__()
  {
    return __get_statics__()->__param_descriptions__;
  }

  inline const std::vector<VidereStereoCamConfig::AbstractGroupDescriptionConstPtr> &VidereStereoCamConfig::__getGroupDescriptions__()
  {
    return __get_statics__()->__group_descriptions__;
  }

  inline const VidereStereoCamConfigStatics *VidereStereoCamConfig::__get_statics__()
  {
    const static VidereStereoCamConfigStatics *statics;

    if (statics) // Common case
      return statics;

    boost::mutex::scoped_lock lock(dynamic_reconfigure::__init_mutex__);

    if (statics) // In case we lost a race.
      return statics;

    statics = VidereStereoCamConfigStatics::get_instance();

    return statics;
  }

//#line 48 "/home/cam/Cooperating-Robots/catkin_ws/src/videre_stereo_cam/cfg/VidereStereoCam.cfg"
      const char * const VidereStereoCam_PROC_MODE_NONE = "none";
//#line 49 "/home/cam/Cooperating-Robots/catkin_ws/src/videre_stereo_cam/cfg/VidereStereoCam.cfg"
      const char * const VidereStereoCam_PROC_MODE_RECTIFIED = "rectified";
//#line 50 "/home/cam/Cooperating-Robots/catkin_ws/src/videre_stereo_cam/cfg/VidereStereoCam.cfg"
      const char * const VidereStereoCam_PROC_MODE_DISPARITY_RAW = "disparity_raw";
//#line 51 "/home/cam/Cooperating-Robots/catkin_ws/src/videre_stereo_cam/cfg/VidereStereoCam.cfg"
      const char * const VidereStereoCam_PROC_MODE_DISPARITY = "disparity";
//#line 52 "/home/cam/Cooperating-Robots/catkin_ws/src/videre_stereo_cam/cfg/VidereStereoCam.cfg"
      const char * const VidereStereoCam_PROC_MODE_TEST = "test";
}

#undef DYNAMIC_RECONFIGURE_FINAL

#endif // __VIDERESTEREOCAMRECONFIGURATOR_H__
